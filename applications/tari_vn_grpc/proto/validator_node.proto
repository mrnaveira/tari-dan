// Copyright 2021. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.vn.rpc;

service ValidatorNode {
    rpc GetIdentity(GetIdentityRequest) returns (GetIdentityResponse);
    rpc InvokeReadMethod(InvokeReadMethodRequest) returns (InvokeReadMethodResponse);
    rpc InvokeMethod(InvokeMethodRequest) returns (InvokeMethodResponse);
}

message GetIdentityRequest { }

message GetIdentityResponse {
    bytes public_key = 1;
    string public_address = 2;
    bytes node_id = 3;
}

message InvokeReadMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
    bytes args = 4;
    bytes sender = 5;
}

message InvokeReadMethodResponse {
    bytes result = 1;
    Authority authority = 2;
}

message Authority {
    bytes node_public_key =1;
    bytes signature = 2;
    bytes proxied_by = 3;
}

message InvokeMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
    bytes args = 4;
    bytes sender = 5;
}

message InvokeMethodResponse {
    string status = 1;
    bytes result = 2;
}
