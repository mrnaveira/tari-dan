[workspace.package]
version = "0.2.0"
edition = "2021"
authors = ["The Tari Development Community"]
repository = "https://github.com/tari-project/tari-dan"
license = "BSD-3-Clause"

[workspace]
members = [
    "applications/tari_dan_app_utilities",
    "applications/tari_dan_wallet_cli",
    "applications/tari_dan_wallet_daemon",
    "applications/tari_indexer",
    "applications/tari_scaffolder",
    "applications/tari_signaling_server",
    "applications/tari_validator_node_cli",
    "applications/tari_validator_node",
    "clients/base_node_client",
    "clients/validator_node_client",
    "clients/wallet_daemon_client",
    "comms/tari_comms_logging",
    "dan_layer/comms_rpc_state_sync",
    "dan_layer/consensus",
    "dan_layer/consensus_tests",
    "dan_layer/epoch_manager",
    "dan_layer/indexer_lib",
    "dan_layer/p2p",
    "dan_layer/state_store_sqlite",
    "dan_layer/storage_lmdb",
    "dan_layer/storage_sqlite",
    "dan_layer/storage",
    "dan_layer/tari_bor",
    "dan_layer/template_abi",
    "dan_layer/template_builtin",
    "dan_layer/template_lib",
    "dan_layer/template_macros",
    "dan_layer/template_test_tooling",
    "dan_layer/transaction_manifest",
    "dan_layer/transaction",
    "dan_layer/validator_node_rpc",
    "dan_layer/wallet/sdk",
    "dan_layer/wallet/storage_sqlite",
    "integration_tests",

    "utilities/transaction_generator",
    "utilities/transaction_submitter",
]
resolver = "2"

[workspace.dependencies]

# internal dependencies among workspace crates
tari_base_node_client = { path = "clients/base_node_client" }
tari_bor = { path = "dan_layer/tari_bor" }
tari_comms_logging = { path = "comms/tari_comms_logging" }
tari_comms_rpc_state_sync = { path = "dan_layer/comms_rpc_state_sync" }
tari_consensus = { path = "dan_layer/consensus" }
tari_dan_app_utilities = { path = "applications/tari_dan_app_utilities" }
tari_dan_common_types = { path = "dan_layer/common_types" }
tari_dan_engine = { path = "dan_layer/engine" }
tari_dan_storage = { path = "dan_layer/storage" }
tari_dan_storage_sqlite = { path = "dan_layer/storage_sqlite" }
tari_dan_wallet_sdk = { path = "dan_layer/wallet/sdk" }
tari_dan_wallet_storage_sqlite = { path = "dan_layer/wallet/storage_sqlite" }
tari_dan_p2p = { path = "dan_layer/p2p" }
tari_engine_types = { path = "dan_layer/engine_types" }
tari_epoch_manager = { path = "dan_layer/epoch_manager" }
tari_indexer = { path = "applications/tari_indexer" }
tari_indexer_lib = { path = "dan_layer/indexer_lib" }
tari_indexer_client = { path = "clients/tari_indexer_client" }
tari_state_store_sqlite = { path = "dan_layer/state_store_sqlite" }
tari_template_abi = { path = "dan_layer/template_abi" }
tari_template_builtin = { path = "dan_layer/template_builtin" }
tari_template_lib = { path = "dan_layer/template_lib" }
tari_template_macros = { path = "dan_layer/template_macros" }
tari_template_test_tooling = { path = "dan_layer/template_test_tooling" }
tari_transaction = { path = "dan_layer/transaction" }
tari_transaction_manifest = { path = "dan_layer/transaction_manifest" }
tari_validator_node = { path = "applications/tari_validator_node" }
tari_validator_node_cli = { path = "applications/tari_validator_node_cli" }
tari_validator_node_client = { path = "clients/validator_node_client" }
tari_validator_node_rpc = { path = "dan_layer/validator_node_rpc" }
tari_dan_wallet_daemon = { path = "applications/tari_dan_wallet_daemon" }
tari_wallet_daemon_client = { path = "clients/wallet_daemon_client" }
transaction_generator = { path = "utilities/transaction_generator" }

# external minotari/tari dependencies
minotari_app_grpc = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_app_utilities = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_console_wallet = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_node = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_node_grpc_client = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_wallet = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_wallet_grpc_client = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_common = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_common_types = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_comms = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_comms_dht = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_comms_rpc_macros = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
# avoid including default features so each crate can choose which ones to import
tari_core = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2", default-features = false }
tari_crypto = "0.19"
tari_key_manager = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_mmr = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_p2p = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_shutdown = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_storage = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_utilities = "0.6"

# Shutdown when panicking so we can see the error, specifically for the wallet
[profile.release]
panic = 'abort'
# By default, Rust will wrap an integer in release mode instead of throwing the overflow error
# seen in debug mode. Panicking at this time is better than silently using the wrong value.
overflow-checks = true

[patch.crates-io]
# Temporarily lock pgp to commit (master branch at time of writing) because the currently release crate locks zeroize to =1.3
liblmdb-sys = { git = "https://github.com/tari-project/lmdb-rs", tag = "0.7.6-tari.1" }

# Make a copy of this code, uncomment and replace account and my-branch with the name of your fork and the branch you want to temporarily use
#[patch."https://github.com/tari-project/tari.git"]
#minotari_app_grpc = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_app_grpc = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_wallet_grpc_client= { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_node_grpc_client = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_common = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_common_types = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms_rpc_macros = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_core = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_key_manager = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_mmr = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_p2p = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_shutdown = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_storage = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_wallet_grpc_client = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_script = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_wallet = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_console_wallet = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_service_framework = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms_dht = { git = "https://github.com/account/tari.git", branch = "my-branch" }

